Problem: Word Search
Description:
Given an m x n grid of characters and a string word, return True if the word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.

Solution:

We can solve this using backtracking. For each character in the matrix, we try to search in all four directions recursively to find the word.

def exist(board: list[list[str]], word: str) -> bool:
    def dfs(i, j, word_index):
        if word_index == len(word):
            return True
        if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[word_index]:
            return False

        temp = board[i][j]
        board[i][j] = '#'  # Mark as visited

        found = (dfs(i + 1, j, word_index + 1) or
                 dfs(i - 1, j, word_index + 1) or
                 dfs(i, j + 1, word_index + 1) or
                 dfs(i, j - 1, word_index + 1))

        board[i][j] = temp  # Unmark visited
        return found

    for i in range(len(board)):
        for j in range(len(board[0])):
            if board[i][j] == word[0] and dfs(i, j, 0):
                return True

    return False

# Example:
board = [['A','B','C','E'], ['S','F','C','S'], ['A','D','E','E']]
word = "ABCCED"
print(exist(board, word))  # Output: True
