Problem: Longest Increasing Path in a Matrix
Description:
Given an m x n matrix, return the length of the longest increasing path in the matrix. You can move in four directions (up, down, left, right) from a cell.

Solution:

Use DFS with memoization to explore each cell and calculate the longest path from that cell.
def longest_increasing_path(matrix: list[list[int]]) -> int:
    if not matrix or not matrix[0]:
        return 0

    rows, cols = len(matrix), len(matrix[0])
    dp = [[-1] * cols for _ in range(rows)]  # Memoization table

    def dfs(i, j):
        if dp[i][j] != -1:
            return dp[i][j]

        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
        max_path = 1

        for direction in directions:
            x, y = i + direction[0], j + direction[1]
            if 0 <= x < rows and 0 <= y < cols and matrix[x][y] > matrix[i][j]:
                max_path = max(max_path, 1 + dfs(x, y))

        dp[i][j] = max_path
        return dp[i][j]

    longest_path = 0
    for i in range(rows):
        for j in range(cols):
            longest_path = max(longest_path, dfs(i, j))

    return longest_path

# Example:
matrix = [[9,9,4], [6,6,8], [2,1,1]]
print(longest_increasing_path(matrix))  # Output: 4
